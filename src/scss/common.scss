@use 'sass:color';
@use 'sass:map';
@import 'mixins';

$common_gap: 1rem;
$common_margin: $common_gap 0;
$common_table_border: #dee2e6;

.common {
    @include font;
    @include root;
    @include zero;

    background: #fff;
    color: #000;

    :any-link {
        @include link;

        @media print {
            color: #000;
            font-weight: map.get($font_weights, body);
            text-decoration-color: $color_gray_light;
        }
    }

    :target {
        background: $color_gold_light;
        border-radius: calc($common_gap / 4);
        box-shadow: 0 0 0 calc($common_gap / 4) $color_gold_light;
    }

    :is(a[aria-current], [aria-current] > a) {
        font-weight: map.get($font_weights, black);
    }

    :is(b, strong, th) {
        @include font(bold);
    }

    :is(code, kbd, samp, pre) {
        @include font(mono);
    }

    :is(fieldset, h1, h2, h3, h4, h5, h6, hr, nav, p) {
        @include zero($margin: $common_margin);
    }

    fieldset {
        border: 1px solid $common_table_border;
        border-radius: $form_border_radius;
        padding: $common_gap;

        & > legend {
            @include zero(
                $margin: 0 0 calc(-1 * $common_gap) calc(-1 * $form_padding_x),
                $padding: 0 $form_padding_x
            );

            & > * {
                margin: 0;
            }
        }
    }

    :is(h1, h2, h3, h4, h5, h6) {
        @include font(h1);
    }

    h2 {
        font-size: map.get($font_sizes, h2);
    }

    h3 {
        font-size: map.get($font_sizes, h3);
    }

    h4 {
        font-size: map.get($font_sizes, h4);
    }

    h5 {
        font-size: map.get($font_sizes, h5);
    }

    h6 {
        font-size: map.get($font_sizes, h6);
    }

    hr {
        border: 0;
        border-top: 1px solid;
        color: inherit;
        opacity: 0.25;
    }

    :is(input, select, textarea) {
        @include form_input;
    }

    :is(input[type='checkbox'], input[type='radio']) {
        @include form_input_check;
    }

    input[type='color'] {
        @include form_input_color;
    }

    input[type='file'] {
        cursor: pointer;

        &::file-selector-button {
            background: #e9ecef;
            border: none;
            border-left: $form_border;
            cursor: pointer;
            float: right;
            font: inherit;
            margin: calc(-1 * $form_padding_y) calc(-1 * $form_padding_x);
            margin-left: $form_padding_x;
            padding: $form_padding;
        }

        &:hover::file-selector-button {
            background: #dde0e3;
        }
    }

    input[type='range'] {
        @include form_input_range;
    }

    select {
        @include form_select;
    }

    table {
        border-collapse: collapse;
        border-color: currentcolor;
        text-indent: 0;
    }

    :where(.common_list, & :global(.bgsu_common_list)) {
        :is(ol, ul) {
            @include zero($margin: $common_margin);
        }

        ol {
            @include list_ordered;
        }

        ul {
            @include list_unordered;
        }
    }

    :global .bgsu_common {
        &_alert {
            @include box($border: true);

            margin: $common_gap 0;

            &__failure {
                background: color.scale($color_rose, $lightness: 80%);
                border: 1px solid $color_rose;
            }

            &__warning {
                background: color.scale($color_gold, $lightness: 80%);
                border: 1px solid $color_gold;
            }

            &__success {
                background: color.scale($color_seafoam, $lightness: 80%);
                border: 1px solid $color_seafoam;
            }
        }

        &_badge {
            @include font(small);

            border: $form_border;
            border-radius: $form_border_radius;
            padding: 0 $form_border_radius;
        }

        &_button {
            @include button;

            &__arrow {
                @include button_set_arrow;
            }

            &__small {
                @include button_set_size(small);

                &.bgsu_common_button__arrow {
                    @include button_set_arrow(small);
                }
            }

            &__primary {
                @include button_set_color(brown);
            }

            &__failure {
                @include button_set_color(rose);
            }

            &__warning {
                @include button_set_color(gold);
            }

            &__success {
                @include button_set_color(seafoam);
            }
        }

        &_color {
            &__failure {
                color: $color_rose;
            }

            &__warning {
                color: $color_gold;
            }

            &__success {
                color: $color_seafoam;
            }
        }

        &_form {
            @include zero;

            &_group {
                @include zero($margin: $common_margin);

                & > * {
                    @include zero(flex);

                    align-items: center;
                    gap: 0 $form_padding_x;
                    position: relative;
                }

                :is(input, output, select, textarea) {
                    width: 100%;
                }

                :is(input[type='checkbox'], input[type='radio']) {
                    @include form_input_check;
                }

                &__question > div {
                    align-items: start;
                    flex-wrap: wrap;
                    gap: 0;

                    & > div {
                        flex: 0 1 100%;
                    }

                    @include container_breakpoint_large {
                        & > div:nth-child(odd) {
                            flex: 0 1 40%;
                        }

                        & > div:nth-child(even) {
                            flex: 0 1 60%;
                            padding-left: $common_gap;
                        }
                    }
                }
            }

            &_table {
                @include zero($margin: $common_margin);

                & > * {
                    @include zero;

                    & > * {
                        @include zero;

                        vertical-align: middle;
                    }

                    & > label {
                        margin-top: $common_gap;
                    }
                }

                @include container_breakpoint_medium {
                    @include scut-relative(
                        calc(-1 * $common_gap / 2)
                        null
                        null
                        calc(-1 * $common_gap)
                    );

                    display: table;
                    margin-bottom: 0;

                    & > * {
                        display: table-row;

                        & > * {
                            display: table-cell;
                            padding-left: $common_gap;
                            padding-top: calc($common_gap / 2);
                        }
                    }

                    &__fixed {
                        label {
                            width: 9rem;
                            height: 3rem;
                            line-height: 1.25;
                        }

                        :is(input, output, select, textarea) {
                            width: 100%;
                        }
                    }
                }
            }
        }

        &_icon {
            display: inline-block;
            position: relative;

            &__close, &__remove {
                @include close;
            }

            &__remove {
                @include close_set_color(red);
            }

            &__right {
                position: absolute;
                right: $form_padding_x;
            }
        }

        &_list {
            &_breadcrumb, &_comma, &_inline, &_tabs {
                @include zero;

                & > li {
                    @include zero(inline);

                    &::before {
                        all: revert;
                    }
                }
            }

            &_breadcrumb {
                @include font(bold);

                color: $color_gray;
                font-size: 0.7rem;
                line-height: 1.5;
                list-style: none;
                margin: calc(-1 * $common_gap) 0 $common_gap;

                & > li + li::before {
                    content: ' / ';
                }
            }

            &_comma {
                & > li {
                    &::after {
                        content: ', ';
                    }

                    &:last-child::after {
                        display: none;
                    }
                }
            }

            &_tabs {
                border-bottom: $box_border;
                display: flex;

                & > li > a {
                    background: $box_background;
                    border: $box_border;
                    border-top-left-radius: $box_border_radius;
                    border-top-right-radius: $box_border_radius;
                    display: block;
                    line-height: 1;
                    margin: 0 0 -1px -1px;
                    padding: $box_padding;

                    &[aria-current] {
                        background: #fff;
                        border-bottom-color: #fff;
                        color: inherit;
                        text-decoration: none;
                    }
                }
            }
        }

        &_records {
            @include zero($margin: $common_margin);

            &_item {
                @include zero($margin: $common_margin);

                color: inherit;
                font-weight: inherit;
                text-decoration: none;

                &_image {
                    background-color: $box_background;
                    background-position: center;
                    background-repeat: no-repeat;
                    background-size: cover;
                    margin: $common_gap 0;
                    order: 2;
                    overflow: hidden;
                    padding-top: 8rem;
                    position: relative;
                    text-align: center;

                    & > * {
                        position: absolute;
                        right: 0;
                        top: 50%;
                        transform: translateY(-50%);
                        width: 100%;
                    }

                    & > img {
                        height: 100%;
                        object-fit: cover;
                        object-position: center;
                    }
                }

                &_title {
                    @include link_underline;

                    color: $link_color;
                    margin-top: 0;
                }

                &:is(:active, :focus, :hover) {
                    color: inherit;

                    .bgsu_common_records_item_title {
                        color: $link_color_active;
                        text-decoration-thickness: 2px;
                    }
                }

                @include container_breakpoint_large {
                    display: flex;

                    & > * {
                        flex: 1 1 0;
                    }

                    &_image {
                        flex: 0 0 25%;
                        margin: 0 0 0 $common_gap;
                        padding-top: calc(25% * (3 / 4));
                    }
                }

                @include container_breakpoint_huge {
                    &_image {
                        flex: 0 0 20%;
                        padding-top: calc(20% * (3 / 4));
                    }
                }
            }

            &__card {
                display: flex;
                flex-wrap: wrap;
                gap: $common_gap;

                @include container_breakpoint_small {
                    flex-wrap: nowrap;
                }

                & > .bgsu_common_records_item {
                    @include box($border: true, $shadow: low);

                    background: #fff;
                    flex: 0 1 100%;
                    flex-direction: column;
                    overflow: hidden;
                    transition: box-shadow 0.3s ease;

                    @include container_breakpoint_small {
                        flex: 0 1 50%;
                    }

                    @include container_breakpoint_medium {
                        flex: 0 1 33%;
                    }

                    @include container_breakpoint_huge {
                        flex: 0 1 25%;
                    }

                    &:is(:active, :focus, :hover) {
                        box-shadow: map.get($box_shadows, medium);
                    }

                    & > .bgsu_common_records_item_image {
                        display: block;
                        margin:
                            calc(-1 * $box_padding_y)
                            calc(-1 * $box_padding_x)
                            0;
                        order: 0;
                        padding-top: calc(100% * (3 / 4));
                    }

                    & > .bgsu_common_records_item_title {
                        margin: $box_padding_y 0 0;
                    }
                }
            }
        }

        &_pagination {
            @include zero;

            align-items: center;
            font-variant-numeric: tabular-nums;

            &_buttons {
                @include zero(flex);

                width: 26rem;

                & > * {
                    flex: 1 1 0;
                }
            }

            &_current {
                @include zero;

                flex: 1 1 auto;
            }

            @include container_breakpoint_huge {
                display: flex;
                text-align: right;

                & > * {
                    padding-right: $common_gap;

                    &:last-child {
                        padding-right: 0;
                    }
                }
            }
        }

        &_sidebar {
            @include zero;

            & > * {
                page-break-inside: avoid;
                padding-top: 1px;
            }

            &_title {
                @include zero;
            }

            @media screen {
                @include zero($display: flex, $margin: $common_margin);

                flex-direction: column;

                & > * {
                    padding: 0;
                }

                &_left, &_right {
                    @include box;
                }
            }

            @include container_breakpoint_large {
                flex-direction: row;

                & > * {
                    flex: 1 0 0%;
                    order: 1;
                }

                &_left, &_right {
                    flex: 0 0 25%;
                }

                &_left {
                    margin-right: $common_gap;
                    order: 0;
                }

                &_right {
                    margin-left: $common_gap;
                    order: 2;
                }

                .bgsu_common_sidebar .bgsu_common_sidebar_left,
                .bgsu_common_sidebar .bgsu_common_sidebar_right,
                .bgsu_common_records_item_image {
                    flex: 0 0 calc((100% + $common_gap) / 3);
                }

                .bgsu_common_records_item_image {
                    padding-top: calc(((100% + $common_gap) / 3) * (3 / 4));
                }
            }

            @include container_breakpoint_huge {
                &_left, &_right {
                    flex: 0 0 20%;
                }

                .bgsu_common_sidebar .bgsu_common_sidebar_left,
                .bgsu_common_sidebar .bgsu_common_sidebar_right,
                .bgsu_common_records_item_image {
                    flex: 0 0 calc((100% + $common_gap) / 4);
                }

                .bgsu_common_records_item_image {
                    padding-top: calc(((100% + $common_gap) / 4) * (3 / 4));
                }
            }
        }

        &_table {
            @include font(table);

            font-variant-numeric: tabular-nums;
            margin: $common_margin;
            padding: 0;
            vertical-align: top;

            & > tbody {
                border-top: 2px solid;
                vertical-align: inherit;
            }

            & > tfoot {
                border-top: 2px solid;
                border-bottom: 2px solid;
            }

            & > thead {
                vertical-align: bottom;
            }

            & > :is(tbody, tfoot, thead) > tr > :is(td, th) {
                border: 0 solid $common_table_border;
                border-bottom-width: 1px;
                padding: calc($common_gap / 2);

                &.bgsu_common__join {
                    padding-right: 0;

                    & + :is(td, th) {
                        padding-left: 0;
                    }
                }

                &.bgsu_common__zero {
                    width: 0;
                }
            }

            & > thead > tr:first-of-type > :is(td, th) {
                padding-top: 0;
            }

            &__separate {
                border-collapse: separate;
                border-spacing: calc($common_gap / 2) 0;
                margin: $common_gap calc(-1 * ($common_gap / 2));
                white-space: nowrap;

                & > thead > tr > :is(td, th) {
                    border-bottom: 2px solid;
                }
            }

            &__small > :is(tbody, tfoot, thead) > tr > :is(td, th) {
                padding: calc($common_gap / 4);
            }
        }

        &__arrow_first::before {
            content: $scut-laquo + $scut-nbsp;
        }

        &__arrow_previous::before {
            content: $scut-lsaquo + $scut-nbsp;
        }

        &__arrow_next::after {
            content: $scut-nbsp + $scut-rsaquo;
        }

        &__arrow_last::after {
            content: $scut-nbsp + $scut-raquo;
        }

        &__bold {
            @include font(bold);
        }

        &__break {
            clear: both;
            display: block;
            margin-top: $common_gap;
        }

        &__center {
            text-align: center;
        }

        &__closer {
            margin-top: calc(-1 * $common_gap);
        }

        &__figure {
            font-variant-numeric: tabular-nums;
            text-align: right;
        }

        &__flex,
        &__flex_column {
            display: flex;
        }

        &__flex_column {
            flex-direction: column;
        }

        @include container_breakpoint_small {
            &__flex_small {
                display: flex;
            }
        }

        @include container_breakpoint_medium {
            &__flex_medium {
                display: flex;
            }
        }

        @include container_breakpoint_large {
            &__flex_large {
                display: flex;
            }
        }

        @include container_breakpoint_huge {
            &__flex_huge {
                display: flex;
            }
        }

        @include container_breakpoint_giant {
            &__flex_giant {
                display: flex;
            }
        }

        &__full {
            width: 100%;
        }

        &__flex,
        &__flex_column,
        &__flex_small,
        &__flex_medium,
        &__flex_large,
        &__flex_huge,
        &__flex_giant {
            & > * {
                flex: 1 1 0;
            }

            & > .bgsu_common__full {
                flex: 1 1 100%;
                min-width: 0;
            }
        }

        &__gap > * {
            padding-right: $common_gap;

            &:last-child {
                padding-right: 0;
            }
        }

        &__left {
            float: left;
            margin-right: $common_gap;
        }

        &__lead {
            @include font(lead);
        }

        &__middle {
            vertical-align: middle;
        }

        &__muted {
            font-weight: map.get($font_weights, body);
        }

        &__narrow {
            @include zero(inline-block);

            &.bgsu_common__flex,
            &.bgsu_common__flex_small,
            &.bgsu_common__flex_medium,
            &.bgsu_common__flex_large,
            &.bgsu_common__flex_huge,
            &.bgsu_common__flex_giant {
                display: inline-flex;
            }
        }

        &__nowrap {
            white-space: nowrap;
        }

        &__print {
            @media screen {
                display: none;
            }

            &_avoid {
                page-break-inside: avoid;
            }

            &_break {
                page-break-before: always;
            }
        }

        &__right {
            float: right;
            margin-left: $common_gap;
        }

        &__rotate {
            transform: rotate(180deg);
            white-space: nowrap;
            writing-mode: vertical-rl;
            min-width: $common_gap;
        }

        &__screen {
            @media print {
                display: none;
            }
        }

        &__sticky {
            position: sticky;
            top: $common_gap;
        }

        &__small {
            @include font(small);
        }

        &__title {
            @include font(title);
        }

        &__top {
            vertical-align: top;
        }
    }
}
